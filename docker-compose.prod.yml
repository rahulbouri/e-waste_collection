services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: eco_collect_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-waste_collection}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - eco_collect_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: eco_collect_redis_prod
    volumes:
      - redis_data:/data
    networks:
      - eco_collect_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: eco_collect_backend_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-waste_collection}
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - SECRET_KEY=${SECRET_KEY}
      - MAIL_SERVER=${MAIL_SERVER:-smtp.gmail.com}
      - MAIL_PORT=${MAIL_PORT:-465}
      - MAIL_USE_TLS=${MAIL_USE_TLS:-false}
      - MAIL_USE_SSL=${MAIL_USE_SSL:-true}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_DEFAULT_SENDER=${MAIL_DEFAULT_SENDER}
      - OTP_EXPIRY=${OTP_EXPIRY:-300}
      - OTP_LENGTH=${OTP_LENGTH:-6}
      - FLASK_ENV=production
    ports:
      - "8000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eco_collect_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.prod
    container_name: eco_collect_frontend_prod
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8000/api}
    depends_on:
      - backend
    networks:
      - eco_collect_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  eco_collect_network:
    driver: bridge 